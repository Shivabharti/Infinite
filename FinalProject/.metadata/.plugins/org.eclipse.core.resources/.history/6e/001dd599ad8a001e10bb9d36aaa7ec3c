package com.java.hms;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.naming.NamingException;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class HmsController {

	SessionFactory sf;
	Session session;

	private Insurance_Details insDetails;
	private Insurance_Claim insClaim;
	private Patient_Enrollment patient;
	private Provider_Details provider;
	private Insurance_Plans insPlan;
	private Claim_History claimHistory;
	private HmsDAOImpl dao;

	public SessionFactory getSf() {
		return sf;
	}

	public void setSf(SessionFactory sf) {
		this.sf = sf;
	}

	public Session getSession() {
		return session;
	}

	public void setSession(Session session) {
		this.session = session;
	}

	public Insurance_Details getInsDetails() {
		return insDetails;
	}

	public void setInsDetails(Insurance_Details insDetails) {
		this.insDetails = insDetails;
	}

	public Insurance_Claim getInsClaim() {
		return insClaim;
	}

	public void setInsClaim(Insurance_Claim insClaim) {
		this.insClaim = insClaim;
	}

	public Patient_Enrollment getPatient() {
		return patient;
	}

	public void setPatient(Patient_Enrollment patient) {
		this.patient = patient;
	}

	public Provider_Details getProvider() {
		return provider;
	}

	public void setProvider(Provider_Details provider) {
		this.provider = provider;
	}

	public Insurance_Plans getInsPlan() {
		return insPlan;
	}

	public void setInsPlan(Insurance_Plans insPlan) {
		this.insPlan = insPlan;
	}

	public Claim_History getClaimHistory() {
		return claimHistory;
	}

	public void setClaimHistory(Claim_History claimHistory) {
		this.claimHistory = claimHistory;
	}

	public HmsDAOImpl getDao() {
		return dao;
	}

	public void setDao(HmsDAOImpl dao) {
		this.dao = dao;
	}

	public HmsController() {
		dao = new HmsDAOImpl();
	}

	public String addClaimHistoryCon() throws NamingException {
		System.out.println("Hacker");
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		Insurance_Claim clm = (Insurance_Claim) sessionMap.get("req");
		if (addValidation(clm) == true) {
			HmsDAOImpl daoNew = new HmsDAOImpl();

			return daoNew.addClaimHistory(clm);
		}
		return "";
	}

	public boolean addValidation(Insurance_Claim insClaim) {
		FacesContext context = FacesContext.getCurrentInstance();
		HmsDAOImpl daoNew = new HmsDAOImpl();
		String[] trickyComment = { "Tricky", "Bad Record", "Misleaded" };
		int subsId = insClaim.getSubscription_Id();
		int insClaimId = insClaim.getClaim_Id();
		System.out.println("Subs Id: " + subsId);
		System.out.println(subsId + " " + insClaimId);
		System.out.println(insClaim);
		Insurance_Details insDetails = daoNew.getInsuranceObject(subsId);

		System.out.println("Insurance Details in Controller " + insDetails.getStatus());
		if (!(insClaim.getDisease()).equals(daoNew.getDisease(insClaim.getSubscription_Id()))) {
			context.addMessage("form:disease",
					new FacesMessage("Patient disease is not matching with the Insurance plan benifits"));
			return false;
		}
		Claim_History claims = daoNew.getClaimHistoryObject(insClaimId);
		if (claims != null) {
			int hisClaimId = claims.getClaim_Id();
			double claimableAmount = daoNew.getCoverageAmount(subsId) - claims.getReimbursementAmount();
			double bill_mis_Amount = insClaim.getBill_Amount() + insClaim.getMis_Amount();
			double needToPay = bill_mis_Amount - claimableAmount;

			if (insClaimId == hisClaimId) {

				if (claims.getComments().equals(trickyComment)) {
					context.addMessage("form:comments", new FacesMessage("Tricky Recod Found In Claim History"));
					return false;
				}
				if (claimableAmount < bill_mis_Amount) {
					context.addMessage("form:bill_Amount", new FacesMessage("You can claim only " + claimableAmount
							+ " amount, rest " + needToPay + " amount you have to pay including gst"));
					return false;
				}

			}
			if (claims.getFromDate().equals(insClaim.getAdmit_date())) {
				context.addMessage("form:admit_date",
						new FacesMessage("Amount already claimed for this date (Duplicate Claim)"));
				return false;
			}

			if (!insClaim.getAdmit_date().after(insDetails.getPremiumStart())) {
				context.addMessage("form:admit_date", new FacesMessage("Your premium has not started yet"));
				return false;
			}

			if (!insClaim.getAdmit_date().before(insDetails.getPremiumEnd())) {
				context.addMessage("form:admit_date", new FacesMessage("Your premium has expired"));
				return false;
			}

		}
		System.out.println("in controller");
		return true;
	}

}
